# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_visualization_agent
# Time Created: 2025-05-30 00:49:23

def data_visualization(data_raw):
    import pandas as pd
    import numpy as np
    import json
    import plotly.graph_objects as go
    import plotly.io as pio





    # Ensure columns are strings because the code expects string column names '2','3','4'
    # Convert columns to strings if they are not
    data_raw.columns = data_raw.columns.map(str)

    # Check that required columns exist
    required_cols = ['2', '3', '4']
    missing_cols = [col for col in required_cols if col not in data_raw.columns]
    if missing_cols:
        raise ValueError(f"Input data is missing required columns: {missing_cols}")

    # Extract the data matrix for heatmap
    z = data_raw[required_cols].copy()

    # We'll create a mask for missing data in column '4'
    missing_mask_4 = z['4'].isna()

    # For visualization, replace NaNs in column '4' with a distinct value outside normal range, e.g. -0.1
    # This will allow color distinction for missing values.
    z_for_color = z.copy()
    z_for_color.loc[missing_mask_4, '4'] = -0.1

    # Define custom colorscale:
    # We want to have a continuous scale from 0 to 1 for valid values,
    # and a distinct color (e.g., gray) for -0.1 indicating missing data.
    # Plotly colorscales are defined from 0 to 1, so we normalize accordingly.
    # Since -0.1 is outside range, we map it to 0 in the colorscale with gray,
    # and shift the real data to range [0.1,1].
    # So we create a colorscale with a gray color at 0, then the rest gradient.

    colorscale = [
        [0.0, "lightgray"],      # for missing data (-0.1)
        [0.1, "rgb(255,245,240)"],
        [0.3, "rgb(252,174,145)"],
        [0.5, "rgb(251,106,74)"],
        [0.7, "rgb(222,45,38)"],
        [0.9, "rgb(165,15,21)"],
        [1.0, "rgb(103,0,13)"]
    ]

    # Normalize z_for_color values to [0.1,1] except missing which is 0
    def normalize_val(val):
        if val == -0.1:
            return 0.0
        else:
            # val in [0,1], map to [0.1,1]
            return 0.1 + 0.9 * val

    z_norm = z_for_color.applymap(normalize_val)

    # Prepare axes labels
    x_labels = required_cols
    y_labels = z.index.tolist()

    # Create annotations to label missing data cells in column '4'
    annotations = []
    for i, loc in enumerate(y_labels):
        if missing_mask_4.loc[loc]:
            annotations.append(dict(
                x='4',
                y=loc,
                text='Missing',
                font=dict(color='black', size=10),
                showarrow=False,
                xanchor='center',
                yanchor='middle'
            ))

    # Create heatmap
    fig = go.Figure(data=go.Heatmap(
        z=z_norm.values,
        x=x_labels,
        y=y_labels,
        colorscale=colorscale,
        colorbar=dict(title="Proportion", tickvals=[0.0, 0.1, 0.5, 1.0],
                      ticktext=["Missing", "0.0", "0.5", "1.0"]),
        zmin=0,
        zmax=1,
        hovertemplate='Location: %{y}<br>Month: %{x}<br>Proportion: %{customdata:.3f}<extra></extra>',
        customdata=z.values  # Show actual proportions or NaN on hover
    ))

    fig.update_layout(
        title="Heatmap of Sales Status Proportions by Customer Location and Month",
        xaxis=dict(title="Month"),
        yaxis=dict(title="Customer Location", autorange='reversed'),
        annotations=annotations,
        margin=dict(l=120, r=40, t=80, b=80)
    )

    fig_json = pio.to_json(fig)
    fig_dict = json.loads(fig_json)

    return fig_dict